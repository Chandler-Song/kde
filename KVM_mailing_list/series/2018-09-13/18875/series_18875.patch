From patchwork Thu Sep 13 21:19:22 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Timofey Titovets <timofey.titovets@synesis.ru>
X-Patchwork-Id: 10600085
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id AF63014D6
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:44 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id EEC982A600
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:44 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id E2B352A648; Thu, 13 Sep 2018 21:19:44 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 8F4982A76F
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:44 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727803AbeINCa5 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Sep 2018 22:30:57 -0400
Received: from mail-wr1-f66.google.com ([209.85.221.66]:38376 "EHLO
        mail-wr1-f66.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727278AbeINCa5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Sep 2018 22:30:57 -0400
Received: by mail-wr1-f66.google.com with SMTP id w11-v6so8166352wrc.5
        for <kvm@vger.kernel.org>; Thu, 13 Sep 2018 14:19:41 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=cFIeUsRp+NBJYkgWfXr3IQGOiaZM5wzZBw+4DdYtwDA=;
        b=fU+SX9xO9gXX81/Gw5khFDPs1Rq/SOHckvkPwz7Wuh8+5rvXAvZyYbMA/9VH410Ra7
         NCC8st8szdtVp0WOnWiPWKFJdhtCexmEsYeJgqhlugnTC5UsRruaFbMZ75sO1v9WRlL4
         Qmj8D8WpiFvU10YwVPIZJ8+/QuwFsh/ZbvpXkdSN+ksNDfn8uYD74Dxi9kC7tdQFhZN3
         WSC7gIg6AQj8co9rVVcdh9YRYhUSZVxK6fj3r/h8LjBy14lqp6HO1irC+TXBA7p4ihPg
         lyp3ljJhsOmgY83FXWEqhQJTgBWbTh7jnrsCkie/lchwmzSZX7TGt+vz51pX9cueLnOF
         zlxg==
X-Gm-Message-State: APzg51CZwLU3oRwAngdrUQnMNlVzFObxyvjUsYcNnqkXUN4wzk9Clefg
        h2v4tbbz7sC/6Hi4DfHkv3b3MVc0i+M=
X-Google-Smtp-Source: 
 ANB0VdaG57Q3qIxxYC5UPFbLnBefIcaaOsK33TWBvBsypFGkiRR4p0kBrxpjWGU+QtPTrc7hQgHL7w==
X-Received: by 2002:a1c:28c2:: with SMTP id
 o185-v6mr7322428wmo.40.1536873581138;
        Thu, 13 Sep 2018 14:19:41 -0700 (PDT)
Received: from TitovetsT.synesis.local ([178.121.227.155])
        by smtp.gmail.com with ESMTPSA id
 75-v6sm11068673wml.21.2018.09.13.14.19.40
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 13 Sep 2018 14:19:40 -0700 (PDT)
From: Timofey Titovets <timofey.titovets@synesis.ru>
To: linux-mm@kvack.org
Cc: Pavel.Tatashin@microsoft.com, rppt@linux.vnet.ibm.com,
        Timofey Titovets <nefelim4ag@gmail.com>,
        Andrea Arcangeli <aarcange@redhat.com>, kvm@vger.kernel.org,
        leesioh <solee@os.korea.ac.kr>
Subject: [PATCH V7 1/2] xxHash: create arch dependent 32/64-bit xxhash()
Date: Fri, 14 Sep 2018 00:19:22 +0300
Message-Id: <20180913211923.7696-2-timofey.titovets@synesis.ru>
X-Mailer: git-send-email 2.19.0
In-Reply-To: <20180913211923.7696-1-timofey.titovets@synesis.ru>
References: <20180913211923.7696-1-timofey.titovets@synesis.ru>
MIME-Version: 1.0
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Timofey Titovets <nefelim4ag@gmail.com>

xxh32() - fast on both 32/64-bit platforms
xxh64() - fast only on 64-bit platform

Create xxhash() which will pickup fastest version
on compile time.

As result depends on cpu word size,
the main proporse of that - in memory hashing.

Changes:
  v2:
    - Create that patch
  v3 -> v6:
    - Nothing, whole patchset version bump

Signed-off-by: Timofey Titovets <nefelim4ag@gmail.com>
CC: Andrea Arcangeli <aarcange@redhat.com>
CC: linux-mm@kvack.org
CC: kvm@vger.kernel.org
CC: leesioh <solee@os.korea.ac.kr>
Reviewed-by: Pavel Tatashin <pavel.tatashin@microsoft.com>
---
 include/linux/xxhash.h | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/include/linux/xxhash.h b/include/linux/xxhash.h
index 9e1f42cb57e9..52b073fea17f 100644
--- a/include/linux/xxhash.h
+++ b/include/linux/xxhash.h
@@ -107,6 +107,29 @@ uint32_t xxh32(const void *input, size_t length, uint32_t seed);
  */
 uint64_t xxh64(const void *input, size_t length, uint64_t seed);
 
+/**
+ * xxhash() - calculate wordsize hash of the input with a given seed
+ * @input:  The data to hash.
+ * @length: The length of the data to hash.
+ * @seed:   The seed can be used to alter the result predictably.
+ *
+ * If the hash does not need to be comparable between machines with
+ * different word sizes, this function will call whichever of xxh32()
+ * or xxh64() is faster.
+ *
+ * Return:  wordsize hash of the data.
+ */
+
+static inline unsigned long xxhash(const void *input, size_t length,
+				   uint64_t seed)
+{
+#if BITS_PER_LONG == 64
+       return xxh64(input, length, seed);
+#else
+       return xxh32(input, length, seed);
+#endif
+}
+
 /*-****************************
  * Streaming Hash Functions
  *****************************/

From patchwork Thu Sep 13 21:19:23 2018
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Timofey Titovets <timofey.titovets@synesis.ru>
X-Patchwork-Id: 10600089
Return-Path: <kvm-owner@kernel.org>
Received: from mail.wl.linuxfoundation.org (pdx-wl-mail.web.codeaurora.org
 [172.30.200.125])
	by pdx-korg-patchwork-2.web.codeaurora.org (Postfix) with ESMTP id AB3AF14D6
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:45 +0000 (UTC)
Received: from mail.wl.linuxfoundation.org (localhost [127.0.0.1])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id E87772A600
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:45 +0000 (UTC)
Received: by mail.wl.linuxfoundation.org (Postfix, from userid 486)
	id DC7182A778; Thu, 13 Sep 2018 21:19:45 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on
	pdx-wl-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-7.9 required=2.0 tests=BAYES_00,MAILING_LIST_MULTI,
	RCVD_IN_DNSWL_HI autolearn=ham version=3.3.1
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.wl.linuxfoundation.org (Postfix) with ESMTP id 541632A648
	for <patchwork-kvm@patchwork.kernel.org>;
 Thu, 13 Sep 2018 21:19:45 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727811AbeINCa6 (ORCPT
        <rfc822;patchwork-kvm@patchwork.kernel.org>);
        Thu, 13 Sep 2018 22:30:58 -0400
Received: from mail-wr1-f65.google.com ([209.85.221.65]:35225 "EHLO
        mail-wr1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726821AbeINCa6 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 13 Sep 2018 22:30:58 -0400
Received: by mail-wr1-f65.google.com with SMTP id j26-v6so8189679wre.2
        for <kvm@vger.kernel.org>; Thu, 13 Sep 2018 14:19:42 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=VrErO3KzNLAe8v4bQPJrWAB0rS+FdfcdIfYPE+8bASo=;
        b=SAq5hiZkV2cO1MRt78OHvU1i4xaHYwGHOwvOw1UDCV8Yq0eFlk1Hw8weE+ZLBkTJK5
         2jpWHb9i93OI0vZlPMxZ4lMZSDVgF5hJlwD0EWMl3DTzRGchGvWeBSSclXv2HIxnjZia
         lf4DkENx8dWetSHhdqzyENxgidshMzJyhtp0KXKyC8/23hZ8ypnXP+x+Bt/xo8Gk0YBq
         agGdifQDNJ6irLTK2PmShNpwO0g+KeXGPQ+mT9EaXXD1lcEDacWBXCW4mnUlZgBRLHRk
         tc5WmInmZ0kZUCr23/nWnYX5EtuNAVesqscfi9CesNNwNA0DgcH/eIARaSsOjIBCPzaR
         LthQ==
X-Gm-Message-State: APzg51ACtZbsxKtSennBXVSJ6BF09wesW8A7TuFJTxNiznrTHyTySJ5U
        W7GSSoP/KSDuf2WNIgxpbkQ=
X-Google-Smtp-Source: 
 ANB0VdYkkn/kwuck2Z1XfYJLZJ7L7HkCA97Wo4n6X5ILKwAc371uOE4h2GNA4vYjod0g+dKL7plJ/g==
X-Received: by 2002:adf:d20a:: with SMTP id
 g10-v6mr7506082wri.66.1536873582299;
        Thu, 13 Sep 2018 14:19:42 -0700 (PDT)
Received: from TitovetsT.synesis.local ([178.121.227.155])
        by smtp.gmail.com with ESMTPSA id
 75-v6sm11068673wml.21.2018.09.13.14.19.41
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Thu, 13 Sep 2018 14:19:41 -0700 (PDT)
From: Timofey Titovets <timofey.titovets@synesis.ru>
To: linux-mm@kvack.org
Cc: Pavel.Tatashin@microsoft.com, rppt@linux.vnet.ibm.com,
        Timofey Titovets <nefelim4ag@gmail.com>,
        leesioh <solee@os.korea.ac.kr>,
        Andrea Arcangeli <aarcange@redhat.com>, kvm@vger.kernel.org
Subject: [PATCH V7 2/2] ksm: replace jhash2 with xxhash
Date: Fri, 14 Sep 2018 00:19:23 +0300
Message-Id: <20180913211923.7696-3-timofey.titovets@synesis.ru>
X-Mailer: git-send-email 2.19.0
In-Reply-To: <20180913211923.7696-1-timofey.titovets@synesis.ru>
References: <20180913211923.7696-1-timofey.titovets@synesis.ru>
MIME-Version: 1.0
Sender: kvm-owner@vger.kernel.org
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org
X-Virus-Scanned: ClamAV using ClamSMTP

From: Timofey Titovets <nefelim4ag@gmail.com>

Replace jhash2 with xxhash.

Perf numbers:
Intel(R) Xeon(R) CPU E5-2420 v2 @ 2.20GHz
ksm: crc32c   hash() 12081 MB/s
ksm: xxh64    hash()  8770 MB/s
ksm: xxh32    hash()  4529 MB/s
ksm: jhash2   hash()  1569 MB/s

By sioh Lee tests (copy from other mail):
Test platform: openstack cloud platform (NEWTON version)
Experiment node: openstack based cloud compute node (CPU: xeon E5-2620 v3, memory 64gb)
VM: (2 VCPU, RAM 4GB, DISK 20GB) * 4
Linux kernel: 4.14 (latest version)
KSM setup - sleep_millisecs: 200ms, pages_to_scan: 200

Experiment process
Firstly, we turn off KSM and launch 4 VMs.
Then we turn on the KSM and measure the checksum computation time until full_scans become two.

The experimental results (the experimental value is the average of the measured values)
crc32c_intel: 1084.10ns
crc32c (no hardware acceleration): 7012.51ns
xxhash32: 2227.75ns
xxhash64: 1413.16ns
jhash2: 5128.30ns

As jhash2 always will be slower (for data size like PAGE_SIZE).
Don't use it in ksm at all.

Use only xxhash for now, because for using crc32c,
cryptoapi must be initialized first - that require some
tricky solution to work good in all situations.

Thanks.

Changes:
  v1 -> v2:
    - Move xxhash() to xxhash.h/c and separate patches
  v2 -> v3:
    - Move xxhash() xxhash.c -> xxhash.h
    - replace xxhash_t with 'unsigned long'
    - update kerneldoc above xxhash()
  v3 -> v4:
    - Merge xxhash/crc32 patches
    - Replace crc32 with crc32c (crc32 have same as jhash2 speed)
    - Add auto speed test and auto choice of fastest hash function
  v4 -> v5:
    - Pickup missed xxhash patch
    - Update code with compile time choicen xxhash
    - Add more macros to make code more readable
    - As now that only possible use xxhash or crc32c,
      on crc32c allocation error, skip speed test and fallback to xxhash
    - For workaround too early init problem (crc32c not avaliable),
      move zero_checksum init to first call of fastcall()
    - Don't alloc page for hash testing, use arch zero pages for that
  v5 -> v6:
    - Use libcrc32c instead of CRYPTO API, mainly for
      code/Kconfig deps Simplification
    - Add crc32c_available():
      libcrc32c will BUG_ON on crc32c problems,
      so test crc32c avaliable by crc32c_available()
    - Simplify choice_fastest_hash()
    - Simplify fasthash()
    - struct rmap_item && stable_node have sizeof == 64 on x86_64,
      that makes them cache friendly. As we don't suffer from hash collisions,
      change hash type from unsigned long back to u32.
    - Fix kbuild robot warning, make all local functions static
  v6 -> v7:
    - Drop crc32c for now and use only xxhash in ksm.

Signed-off-by: Timofey Titovets <nefelim4ag@gmail.com>
Signed-off-by: leesioh <solee@os.korea.ac.kr>
CC: Andrea Arcangeli <aarcange@redhat.com>
CC: linux-mm@kvack.org
CC: kvm@vger.kernel.org
Reviewed-by: Pavel Tatashin <pavel.tatashin@microsoft.com>
---
 mm/Kconfig | 1 +
 mm/ksm.c   | 6 ++++--
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/mm/Kconfig b/mm/Kconfig
index a550635ea5c3..b5f923081bce 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -297,6 +297,7 @@ config MMU_NOTIFIER
 config KSM
 	bool "Enable KSM for page merging"
 	depends on MMU
+	select XXHASH
 	help
 	  Enable Kernel Samepage Merging: KSM periodically scans those areas
 	  of an application's address space that an app has advised may be
diff --git a/mm/ksm.c b/mm/ksm.c
index 5b0894b45ee5..30c595dd5d87 100644
--- a/mm/ksm.c
+++ b/mm/ksm.c
@@ -25,7 +25,7 @@
 #include <linux/pagemap.h>
 #include <linux/rmap.h>
 #include <linux/spinlock.h>
-#include <linux/jhash.h>
+#include <linux/xxhash.h>
 #include <linux/delay.h>
 #include <linux/kthread.h>
 #include <linux/wait.h>
@@ -41,6 +41,7 @@
 #include <linux/numa.h>
 
 #include <asm/tlbflush.h>
+
 #include "internal.h"
 
 #ifdef CONFIG_NUMA
@@ -303,6 +304,7 @@ static DEFINE_SPINLOCK(ksm_mmlist_lock);
 		sizeof(struct __struct), __alignof__(struct __struct),\
 		(__flags), NULL)
 
+
 static int __init ksm_slab_init(void)
 {
 	rmap_item_cache = KSM_KMEM_CACHE(rmap_item, 0);
@@ -1009,7 +1011,7 @@ static u32 calc_checksum(struct page *page)
 {
 	u32 checksum;
 	void *addr = kmap_atomic(page);
-	checksum = jhash2(addr, PAGE_SIZE / 4, 17);
+	checksum = xxhash(addr, PAGE_SIZE, 0);
 	kunmap_atomic(addr);
 	return checksum;
 }
